# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TypeAccount {
  code: Float!
  name: String!
  nature: String!
  state: Boolean!
  account: Account!
  auxiliary: Auxiliary!
  group: Group!
  classAccount: ClassAccount!
  subAccount: SubAccount!
}

type ClassAccount {
  code: Float!
  type: String!
  accounts: [Group!]!
  typeAccount: TypeAccount!
}

type Group {
  code: Float!
  type: String!
  accounts: [Account!]!
  typeAccount: TypeAccount!
}

type Account {
  code: Float!
  type: String!
  accounts: [SubAccount!]!
  typeAccount: TypeAccount!
}

type SubAccount {
  code: Float!
  type: String!
  accounts: [Auxiliary!]!
  typeAccount: TypeAccount!
}

type InstallmentAccount {
  numberInstallment: Float!
  id_credit: Float!
  idAccount: Float!
  value: Float!
  date: Date!
  concept: String!
  installment: Installment!
  account: Auxiliary!
}

type Installment {
  installmentNumber: Float!
  id_credit: Float!
  paymentDate: Date!
  initialBalance: Float!
  scheduledPayment: Float!
  extraPayment: Float!
  totalPayment: Float!
  capital: Float!
  interest: Float!
  finalBalance: Float!
  state: String!
  credit: Credit!
  interestAccount: [InstallmentAccount!]!
}

type Employee {
  username: String!
  password: String!
}

type Provider {
  idProvider: Float!
  user: Provider!
}

type User {
  typeIdentification: String!
  identification: Float!
  name: String!
  lastName: String!
  expeditionDate: Date!
  expeditionCity: String!
  birthDate: Date!
  countryBirth: String!
  stateBirth: String!
  cityBirth: String!
  gender: String!
  statusCivil: String!
  addressResidence: String!
  countryResidence: String!
  stateResidence: String!
  cityResidence: String!
  phone: String!
  landLine: String!
  email: String!
  housingType: String!
  studies: String!
  profession: String!
  foreignOperations: Boolean!
  publicResources: Boolean!
  publicRecognition: Boolean!
  publicPower: Boolean!
  status: Boolean!
  affiliate: Affiliate
  employee: Employee
  provider: Provider
}

type Beneficiary {
  idDocument: Float!
  name: String!
  beneficiaryAffiliate: BeneficiaryAffiliate!
}

type BeneficiaryAffiliate {
  percentage: Float!
  beneficiary: Beneficiary!
  affiliate: Affiliate!
}

type Saving {
  id: Int!
  qoutaValue: Float!
  startDate: Date!
  affiliate: Affiliate!
  typeSaving: TypeSaving!
}

type Affiliate {
  company: String!
  addreesCompany: String!
  emailJob: String!
  salary: Float!
  bank: String!
  jobTitle: String!
  phone: Float!
  incomeCompany: Date!
  typeAccount: String!
  numberAccount: Float!
  user: User!
  beneficiaries: [BeneficiaryAffiliate!]!
  credits: [Credit!]!
  savings: [Saving!]!
}

type TypeCredit {
  id: Float!
  name: String!
  interest: Float!
  auxiliarys: [Auxiliary!]!
  credits: [Credit!]!
}

type RefinanceCredit {
  nameAffiliate: String!
  identification: Float!
  previewBalance: Float!
  typeCredit: String!
  interest: Float!
  idTypeCredit: Float!
}

type Credit {
  id: Float!
  creditValue: Float!
  interest: Float!
  startDate: Date!
  discountDate: Date!
  state: String!
  affiliate: Affiliate!
  installments: [Installment!]!
  creditAccounts: [CreditAccount!]!
  typeCredit: TypeCredit!
}

type CreditAccount {
  idCredit: Float!
  idAccount: Float!
  value: Float!
  concept: String!
  credit: Credit!
  account: Auxiliary!
}

type Auxiliary {
  code: Float!
  type: String!
  typeAccount: TypeAccount!
  creditAccounts: [CreditAccount!]!
  installmentInterest: [InstallmentAccount!]!
}

type TypeSaving {
  id: Float!
  name: String!
  auxiliarys: [Auxiliary!]!
  savings: [Saving!]!
}

type Location {
  id: Float!
  name: String!
  iso2: String!
}

type Town {
  id: Float!
  name: String!
}

type Token {
  token: String!
}

type Company {
  typeIdentification: String!
  numberIdentification: Float!
  digitVerification: Float!
  regime: String!
  typePerson: String!
  socialReason: String!
  legalRepresentativeTypeIdentificatio: String!
  legalRepresentativeName: String!
  legalRepresentativeDocument: String!
  natureCompany: String!
}

type ViewCredit {
  id: Float!
  identification: Float!
  lastName: String!
  name: String!
  creditValue: Float!
  interest: Float!
  nameCredit: String!
  state: String!
  discountDate: Date!
}

type InstallmentType {
  installmentNumber: Float!
  paymentDate: Date!
  initialBalance: Float!
  scheduledPayment: Float!
  extraPayment: Float!
  totalPayment: Float!
  capital: Float!
  interest: Float!
  finalBalance: Float!
  isPay: Boolean
}

type InstallmentPayment {
  installmentNumber: Float!
  credit: Float!
  paymentDate: Date!
  scheduledPayment: Float!
  interest: Float!
  finalBalance: Float!
  identification: Float!
  name: String!
  lastName: String!
  typeCredit: String!
  extraPayment: Float!
  totalPayment: Float!
  capital: Float!
  interestPayment: Float!
  idTypeCredit: Float!
  isSelected: Boolean!
}

type ViewSaving {
  id: Float!
  identification: Float!
  lastName: String!
  name: String!
  qoutaValue: Float!
  startDate: Date!
  nameSaving: String!
}

input InstallmentInput {
  installmentNumber: Float!
  paymentDate: Date!
  initialBalance: Float!
  scheduledPayment: Float!
  extraPayment: Float!
  totalPayment: Float!
  capital: Float!
  interest: Float!
  finalBalance: Float!
  isPay: Boolean
}

input InputTypeInstallmentPayment {
  installmentNumber: Float!
  credit: Float!
  paymentDate: Date!
  scheduledPayment: Float!
  interest: Float!
  finalBalance: Float!
  identification: Float!
  name: String!
  lastName: String!
  typeCredit: String!
  extraPayment: Float!
  totalPayment: Float!
  capital: Float!
  interestPayment: Float!
  idTypeCredit: Float!
  isSelected: Boolean! = false
}

"""Date custom scalar type"""
scalar Date

type Query {
  getUser(id: Int!): User!
  getAllUsers: [User!]!
  allAfiliates: [Affiliate!]!
  getAffiliate(identification: Float!): Affiliate!
  allEmployees: [Employee!]!
  provider(id: Int!): Provider!
  getCountry: [Location!]!
  getState(isoCode: String!): [Location!]!
  getTown(isoCodeCountry: String!, isoCodeState: String!): [Town!]!
  allCompanies: [Company!]!
  company(numberIdentification: Float!): Company!
  allTypeAccount: [TypeAccount!]!
  getClassAccount(code: Float!): ClassAccount!
  getClassAccountAll: [ClassAccount!]!
  getGroupAll: [Group!]!
  getGroup(code: Float!): Group!
  getGroupByClass(code: Float!): [Group!]!
  getAccountAll: [Account!]!
  getAccountsByGroup(code: Float!): [Account!]!
  getAccount(code: Float!): Account!
  getSubAccountAll: [SubAccount!]!
  getSubAccount(code: Float!): SubAccount!
  getSubAccountByAccount(code: Float!): [SubAccount!]!
  getAuxilaryAll: [Auxiliary!]!
  getAuxiliary(code: Float!): Auxiliary!
  getAccountBySubAccount(code: Float!): [Auxiliary!]!
  getTypeSavingAll: [TypeSaving!]!
  getTypeCredit(id: Float!): TypeCredit!
  getTypeCreditAll: [TypeCredit!]!
  getAllCredit: [ViewCredit!]!
  findOneCredit(id: Int!): Credit!
  refinanceCredit(id: Int!): RefinanceCredit!
  getAllSaving: [ViewSaving!]!
  getSaving(id: Int!): Saving!
}

type Mutation {
  createUser(createUserInput: UserInput!, createAffiiate: InputAffiliateCreate, createEmployee: InputEmployeeCreate, createProvider: Boolean): Boolean!
  updateStatus(identification: Int!, status: Boolean!): User!
  deleteUser(identification: Int!): Boolean!
  updateAfiliate(id: Float!, input: UpdateAfiliateDto!): Affiliate!
  removeProvider(id: Int!): Provider!
  authUser(username: String!, password: String!): Token!
  createCompany(input: CreateCompanyDto!): Boolean!
  deleteCompany(numberIdentification: Float!): Boolean!
  createAccount(createTypeAccount: TypeAccountInput!, type: String, referenceTypeAccount: Float): Boolean!
  deleteAccount(code: Int!): Boolean!
  updateStatusAccount(code: Float!, status: Boolean!): Boolean!
  updateAccount(updateTypeAccount: TypeAccountInput!, code: Float!): Boolean!
  createTypeSaving(data: CreateTypeSavingDto!): TypeSaving!
  updateTypeSaving(data: UpdateTypeSavingInput!, id: Float!): Boolean!
  deleteTypeSaving(id: Int!): Boolean!
  createTypeCredit(data: CreateTypeCreditDto!): Boolean!
  updateTypeCredit(data: UpdateTypeCreditInput!, id: Float!): Boolean!
  deleteTypeCredit(id: Int!): Boolean!
  createCredit(createCreditInput: CreateCreditInput!): Credit!
  isRefinance(id: Int!): Boolean!
  deleteCredit(id: Int!): Boolean!
  amortizationTableGenerate(Date: Date!, creditValue: Float!, interest: Float!, installments: Int!): [InstallmentType!]!
  amortizationTableGenerateTwo(Date: Date!, scheduledPayment: Float!, interest: Float!, installments: Int!): [InstallmentType!]!
  amortizationTableGenerateThree(Date: Date!, creditValue: Float!, interest: Float!, scheduledPayment: Float!): [InstallmentType!]!
  amortizationTableChange(tableAmortization: ChangeAmortization!): [InstallmentType!]!
  getAllInstallments(date: Date!): [InstallmentPayment!]!
  createSaving(createSavingInput: CreateSavingInput!): Boolean!
  updateSaving(updateSavingInput: UpdateSavingInput!): Saving!
  removeSaving(id: Int!): Saving!
  createInstallmentAccount(data: InputCreateInstallmentAccount!): Boolean!
}

input UserInput {
  typeIdentification: String!
  identification: Float!
  name: String!
  lastName: String!
  expeditionDate: Date!
  expeditionCity: String!
  birthDate: Date!
  countryBirth: String!
  stateBirth: String!
  cityBirth: String!
  gender: String!
  statusCivil: String!
  addressResidence: String!
  countryResidence: String!
  stateResidence: String!
  cityResidence: String!
  phone: String!
  landLine: String!
  email: String!
  housingType: String!
  studies: String!
  profession: String!
  foreignOperations: Boolean!
  publicResources: Boolean!
  publicRecognition: Boolean!
  publicPower: Boolean!
}

input InputAffiliateCreate {
  inputAffiliate: CreateAfiliateDto!
  beneficiaries: [BeneficiaryInputGeneral!]!
}

input CreateAfiliateDto {
  company: String!
  addreesCompany: String!
  emailJob: String!
  salary: Float!
  bank: String!
  jobTitle: String!
  phone: Float!
  incomeCompany: Date!
  typeAccount: String!
  numberAccount: Float!
}

input BeneficiaryInputGeneral {
  beneficiary: BeneficiaryInput!
  percentage: Float!
}

input BeneficiaryInput {
  name: String!
  idDocument: Float!
}

input InputEmployeeCreate {
  username: String!
  password: String!
}

input UpdateAfiliateDto {
  company: String
  addreesCompany: String
  emailJob: String
  salary: Float
  bank: String
  jobTitle: String
  phone: Float
  incomeCompany: Float
  typeAccount: String
  numberAccount: Float
}

input CreateCompanyDto {
  typeIdentification: String!
  numberIdentification: Float!
  digitVerification: Float!
  regime: String!
  typePerson: String!
  socialReason: String!
  legalRepresentativeTypeIdentificatio: String!
  legalRepresentativeName: String!
  legalRepresentativeDocument: String!
  natureCompany: String!
}

input TypeAccountInput {
  code: Float!
  name: String!
  nature: String!
}

input CreateTypeSavingDto {
  name: String!
  auxiliary: [Int!]
}

input UpdateTypeSavingInput {
  name: String!
}

input CreateTypeCreditDto {
  name: String!
  interest: Float!
  auxiliary: [Int!]!
}

input UpdateTypeCreditInput {
  name: String
  interest: Float
}

input CreateCreditInput {
  creditValue: Float!
  interest: Float!
  startDate: Date!
  discountDate: Date!
  affiliateId: Float!
  idTypeCredit: Float!
  installments: [InstallmentInput!]!
  concept: String!
}

input ChangeAmortization {
  tableAmortization: [InstallmentInput!]!
}

input CreateSavingInput {
  qoutaValue: Float!
  startDate: Date!
  affiliateId: Int!
  typeSavingId: Int!
}

input UpdateSavingInput {
  qoutaValue: Float
  startDate: Date
  affiliateId: Int
  typeSavingId: Int
  id: Int!
}

input InputCreateInstallmentAccount {
  installments: [InputTypeInstallmentPayment!]!
  date: Date!
  concept: String!
}