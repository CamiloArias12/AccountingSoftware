# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TypeAccount {
  code: Float!
  name: String!
  nature: String!
  state: Boolean!
  account: Account!
  auxiliary: Auxiliary!
  group: Group!
  classAccount: ClassAccount!
  subAccount: SubAccount!
}

type ClassAccount {
  code: Float!
  type: String!
  groups: [Group!]!
  typeAccount: TypeAccount!
}

type Group {
  code: Float!
  type: String!
  accounts: [Account!]!
  typeAccount: TypeAccount!
}

type Account {
  code: Float!
  type: String!
  subAccounts: [SubAccount!]!
  typeAccount: TypeAccount!
}

type SubAccount {
  code: Float!
  type: String!
  auxiliaries: [Auxiliary!]!
  typeAccount: TypeAccount!
}

type Auxiliary {
  code: Float!
  type: String!
  typeAccount: TypeAccount!
}

type TypeSaving {
  id: Float!
  name: String!
  auxiliarys: [Auxiliary!]!
}

type TypeCredit {
  id: Float!
  name: String!
  interest: Float!
  auxiliarys: [Auxiliary!]!
}

type Location {
  id: Float!
  name: String!
  iso2: String!
}

type Town {
  id: Float!
  name: String!
}

type Beneficiary {
  idDocument: Float!
  name: String!
  beneficiaryAffiliate: BeneficiaryAffiliate!
}

type BeneficiaryAffiliate {
  percentage: Float!
  beneficiary: Beneficiary!
  affiliate: Affiliate!
}

type Affiliate {
  company: String!
  addreesCompany: String!
  emailJob: String!
  salary: Float!
  bank: String!
  jobTitle: String!
  phone: Float!
  incomeCompany: Float!
  typeAccount: String!
  numberAccount: Float!
  user: User!
  beneficiaries: [BeneficiaryAffiliate!]!
}

<<<<<<< HEAD
type Employee {
  username: String!
  password: String!
}

type Provider {
  idProvider: Float!
  user: Provider!
}

type User {
  typeIdentification: String!
  identification: Float!
  name: String!
  lastName: String!
  expeditionDate: DateTime!
  expeditionCity: String!
  birthDate: DateTime!
  countryBirth: String!
  stateBirth: String!
  cityBirth: String!
  gender: String!
  statusCivil: String!
  addressResidence: String!
  countryResidence: String!
  stateResidence: String!
  cityResidence: String!
  phone: String!
  landLine: String!
  email: String!
  housingType: String!
  studies: String!
  profession: String!
  foreignOperations: Boolean!
  publicResources: Boolean!
  publicRecognition: Boolean!
  publicPower: Boolean!
  status: Boolean!
  affiliate: Affiliate
  employee: Employee
  provider: Provider
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Token {
  token: String!
=======
type Credit {
  id: Int!
  loanAmount: Float!
  annualInterest: Float!
  loanPeriod: Float!
  startDate: DateTime!
  installments: [Installment!]!
}

type Installment {
  id: Int!
  number: Int
  paymentDate: DateTime!
  initialBalance: Float!
  scheduledPayment: Float!
  extraPayment: Float!
  totalPayment: Float!
  capital: Float!
  interest: Float!
  finalBalance: Float!
  credit: Credit!
}

type Saving {
  """Example field (placeholder)"""
  exampleField: Int!
>>>>>>> 15bb989
}

type Query {
  getUser(id: Int!): User!
  getAllUsers: [User!]!
  allAfiliates: [Affiliate!]!
  getAffiliate(identification: Float!): Affiliate!
  allEmployees: [Employee!]!
  provider(id: Int!): Provider!
  getCountry: [Location!]!
  getState(isoCode: String!): [Location!]!
  getTown(isoCodeCountry: String!, isoCodeState: String!): [Town!]!
<<<<<<< HEAD
  allTypeAccount: [TypeAccount!]!
  getClassAccount(code: Float!): ClassAccount!
  getClassAccountAll: [ClassAccount!]!
  getGroupAll: [Group!]!
  getGroup(code: Float!): Group!
  getGroupByClass(code: Float!): [Group!]!
  getAccountAll: [Account!]!
  getAccountsByGroup(code: Float!): [Account!]!
  getAccount(code: Float!): Account!
  getSubAccountAll: [SubAccount!]!
  getSubAccount(code: Float!): SubAccount!
  getSubAccountByAccount(code: Float!): [SubAccount!]!
  getAuxilaryAll: [Auxiliary!]!
  getAuxiliary(code: Float!): Auxiliary!
  getAccountBySubAccount(code: Float!): [Auxiliary!]!
  getTypeSavingAll: [TypeSaving!]!
  getTypeCreditAll: [TypeCredit!]!
=======
  allAfiliates: [Affiliate!]!
  getAffiliate(identification: Float!): Affiliate!
  afiliate(id: Float!): User!
  allEmployees: [Employee!]!
  allClassAccounts: [TypeAccount!]!
  classAccount(code: Float!): ClassAccount!
  allGroups: [Group!]!
  group(code: Float!): Group!
  allAccounts: [Account!]!
  account(code: Float!): Account!
  allSubAccounts: [SubAccount!]!
  subAccount(code: Float!): SubAccount!
  allAuxiliaries: [Auxiliary!]!
  auxiliary(code: Float!): Auxiliary!
  credit(id: Int!): Credit!
  installments: [Installment!]!
  installment(id: Int!): Installment!
  saving(id: Int!): Saving!
>>>>>>> 15bb989
}

type Mutation {
  createUser(createUserInput: UserInput!, createAffiiate: InputAffiliateCreate, createEmployee: InputEmployeeCreate, createProvider: Boolean): Boolean!
  updateStatus(identification: Int!, status: Boolean!): User!
  updateAfiliate(id: Float!, input: UpdateAfiliateDto!): Affiliate!
  removeProvider(id: Int!): Provider!
  authUser(username: String!, password: String!): Token!
  createAccount(createTypeAccount: CreateTypeAccount!, type: String, referenceTypeAccount: Float): TypeAccount!
  createTypeSaving(data: CreateTypeSavingDto!): TypeSaving!
  updateTypeSaving(data: UpdateTypeSavingDto!): TypeSaving!
  createTypeCredit(data: CreateTypeCreditDto!): TypeCredit!
  updateTypeCredit(data: UpdateTypeCreditDto!): TypeCredit!
  createCredit(createCreditInput: CreateCreditInput!): Credit!
  updateCredit(updateCreditInput: UpdateCreditInput!): Credit!
  removeCredit(id: Int!): Credit!
  createInstallment(createInstallmentInput: CreateInstallmentInput!): Installment!
  updateInstallment(updateInstallmentInput: UpdateInstallmentInput!): Installment!
  removeInstallment(id: Int!): Installment!
  createSaving(createSavingInput: CreateSavingInput!): Saving!
  updateSaving(updateSavingInput: UpdateSavingInput!): Saving!
  removeSaving(id: Int!): Saving!
}

input UserInput {
  typeIdentification: String!
  identification: Float!
  name: String!
  lastName: String!
  expeditionDate: DateTime!
  expeditionCity: String!
  birthDate: DateTime!
  countryBirth: String!
  stateBirth: String!
  cityBirth: String!
  gender: String!
  statusCivil: String!
  addressResidence: String!
  countryResidence: String!
  stateResidence: String!
  cityResidence: String!
  phone: String!
  landLine: String!
  email: String!
  housingType: String!
  studies: String!
  profession: String!
  foreignOperations: Boolean!
  publicResources: Boolean!
  publicRecognition: Boolean!
  publicPower: Boolean!
}

input InputAffiliateCreate {
  inputAffiliate: CreateAfiliateDto!
  beneficiaries: [BeneficiaryInputGeneral!]!
}

input CreateAfiliateDto {
  company: String!
  addreesCompany: String!
  emailJob: String!
  salary: Float!
  bank: String!
  jobTitle: String!
  phone: Float!
  incomeCompany: Float!
  typeAccount: String!
  numberAccount: Float!
}

input BeneficiaryInputGeneral {
  beneficiary: BeneficiaryInput!
  percentage: Float!
}

input BeneficiaryInput {
  name: String!
  idDocument: Float!
}

input InputEmployeeCreate {
  username: String!
  password: String!
}

input UpdateAfiliateDto {
  company: String
  addreesCompany: String
  emailJob: String
  salary: Float
  bank: String
  jobTitle: String
  phone: Float
  incomeCompany: Float
  typeAccount: String
  numberAccount: Float
}

input CreateTypeAccount {
  code: Float!
  name: String!
  nature: String!
}

input CreateTypeSavingDto {
  name: String!
  auxiliary: [Int!]
}

input UpdateTypeSavingDto {
  id: Float!
  name: String!
  subAccount: [Int!]
  account: [Int!]
  auxiliary: [Int!]
}

input CreateTypeCreditDto {
  name: String!
  interest: Float!
  auxiliary: [Int!]!
}

input UpdateTypeCreditDto {
  id: Float!
  name: String
  interest: Float
  auxiliary: [Int!]
}

input CreateCreditInput {
  loanAmount: Float!
  annualInterest: Float!
  loanPeriod: Float!
  startDate: DateTime!
}

input UpdateCreditInput {
  loanAmount: Float
  annualInterest: Float
  loanPeriod: Float
  startDate: DateTime
  id: Int!
}

input CreateInstallmentInput {
  paymentDate: DateTime!
  initialBalance: Float!
  scheduledPayment: Float!
  extraPayment: Float!
  totalPayment: Float!
  capital: Float!
  interest: Float!
  finalBalance: Float!
  creditId: Int!
}

input UpdateInstallmentInput {
  paymentDate: DateTime
  initialBalance: Float
  scheduledPayment: Float
  extraPayment: Float
  totalPayment: Float
  capital: Float
  interest: Float
  finalBalance: Float
  creditId: Int
  id: Int!
}

input CreateSavingInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSavingInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}