# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Location {
  id: Float!
  name: String!
  iso2: String!
}

type Town {
  id: Float!
  name: String!
}

type Employee {
  username: String!
  password: String!
}

type User {
  typeidentification: String!
  identification: Float!
  expeditionDate: DateTime!
  expeditionCity: String!
  countryCard: String!
  municipalityCard: String!
  cityCard: String!
  name: String!
  lastName: String!
  gender: String!
  statusCivil: String!
  addressResidence: String!
  municipality: String!
  city: String!
  phone: Float!
  landLine: Float!
  email: String!
  housingType: String!
  studies: String!
  profession: String!
  foreignOperations: Boolean!
  publicResources: Boolean!
  publicRecognition: Boolean!
  publicPower: Boolean!
  affiliate: Affiliate!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Beneficiary {
  idDocument: Float!
  name: String!
  affiliate: BeneficiaryAffiliate!
}

type BeneficiaryAffiliate {
  percentage: Float!
  beneficiary: Beneficiary!
  afiliate: Affiliate!
}

type Affiliate {
  idAffiliate: Float!
  company: String!
  addreesCompany: String!
  emailJob: String!
  salary: Float!
  bank: String!
  jobTitle: String!
  phone: Float!
  incomeCompany: Float!
  typeAccount: String!
  numberAccount: Float!
  user: User!
  beneficiary: BeneficiaryAffiliate!
}

type TypeSaving {
  id: Float!
  nombre: String!
  cuentas: String!
}

type TypeCredit {
  id: Float!
  nombre: String!
  cuentas: String!
}

type Auxiliary {
  code: Float!
  name: String!
  nature: String!
}

type ClassAccount {
  code: Float!
  name: String!
  nature: String!
}

type Group {
  code: Float!
  name: String!
  nature: String!
}

type Account {
  code: Float!
  name: String!
  nature: String!
}

type Query {
  getCountry: [Location!]!
  getState(isoCode: String!): [Location!]!
  getTown(isoCodeCountry: String!, isoCodeState: String!): [Town!]!
  allAfiliates: [Affiliate!]!
  afiliate(id: Float!): User!
  allEmployees: [Employee!]!
  allClassAccounts: [ClassAccount!]!
  classAccount(code: Float!): ClassAccount!
  allGroups: [Group!]!
  group(code: Float!): Group!
  allAccounts: [Account!]!
  account(code: Float!): Account!
  allAuxiliaries: [Auxiliary!]!
  auxiliary(code: Float!): Auxiliary!
  allTypeSavings: [TypeSaving!]!
  typeSaving(id: Float!): TypeSaving!
  allTypeCredits: [TypeCredit!]!
  typeCredit(id: Float!): TypeCredit!
}

type Mutation {
  createAfiliate(inputAffiliate: CreateAfiliateDto!, inputUser: CreateUser!): Affiliate!
  updateAfiliate(id: Float!, input: UpdateAfiliateDto!): Affiliate!
  createEmployee(inputEmployee: CreateEmployee!, inputUser: CreateUser!): Employee!
  createEmployeeUserExist(inputEmployee: CreateEmployee!, idUser: Float!): Employee!
  createClassAccount(input: CreateClassAccountDto!): ClassAccount!
  updateClassAccount(code: Float!, input: UpdateClassAccountDto!): ClassAccount!
  deleteClassAccount(code: Float!): Boolean!
  createGroup(input: CreateGroupDto!): Group!
  updateGroup(code: Float!, input: UpdateGroupDto!): Group!
  deleteGroup(code: Float!): Boolean!
  createAccount(input: CreateAccountDto!): Account!
  updateAccount(code: Float!, input: UpdateAccountDto!): Account!
  deleteAccount(code: Float!): Boolean!
  createAuxiliary(input: CreateAuxiliaryDto!): Auxiliary!
  updateAuxiliary(code: Float!, input: UpdateAuxiliaryDto!): Auxiliary!
  deleteAuxiliary(code: Float!): Boolean!
  createTypeSaving(input: CreateTypeSavingDto!): TypeSaving!
  updateTypeSaving(id: Float!, input: UpdateTypeSavingDto!): TypeSaving!
  deleteTypeSaving(id: Float!): Boolean!
  createTypeCredit(input: CreateTypeCreditDto!): TypeCredit!
  updateTypeCredit(id: Float!, input: UpdateTypeCreditDto!): TypeCredit!
  deleteTypeCredit(id: Float!): Boolean!
}

input CreateAfiliateDto {
  company: String!
  addreesCompany: String!
  emailJob: String!
  salary: Float!
  bank: String!
  jobTitle: String!
  phone: Float!
  incomeCompany: Float!
  typeAccount: String!
  numberAccount: Float!
}

input CreateUser {
  typeidentification: String!
  identification: Float!
  expeditionDate: DateTime!
  expeditionCity: String!
  countryCard: String!
  municipalityCard: String!
  cityCard: String!
  name: String!
  lastName: String!
  gender: String!
  statusCivil: String!
  addressResidence: String!
  municipality: String!
  city: String!
  phone: Float!
  landLine: Float!
  email: String!
  housingType: String!
  studies: String!
  profession: String!
  foreignOperations: Boolean!
  publicResources: Boolean!
  publicRecognition: Boolean!
  publicPower: Boolean!
}

input UpdateAfiliateDto {
  company: String
  addreesCompany: String
  emailJob: String
  salary: Float
  bank: String
  jobTitle: String
  phone: Float
  incomeCompany: Float
  typeAccount: String
  numberAccount: Float
}

input CreateEmployee {
  username: String!
  password: String!
}

input CreateClassAccountDto {
  code: Float!
  name: String!
  nature: String!
}

input UpdateClassAccountDto {
  code: Float
  name: String
  nature: String
}

input CreateGroupDto {
  code: Float!
  name: String!
  nature: String!
}

input UpdateGroupDto {
  code: Float
  name: String
  nature: String
}

input CreateAccountDto {
  code: Float!
  name: String!
  nature: String!
}

input UpdateAccountDto {
  code: Float
  name: String
  nature: String
}

input CreateAuxiliaryDto {
  code: Float!
  name: String!
  nature: String!
}

input UpdateAuxiliaryDto {
  code: Float
  name: String
  nature: String
}

input CreateTypeSavingDto {
  id: Float!
  nombre: String!
  cuentas: String!
}

input UpdateTypeSavingDto {
  id: Float
  nombre: String
  cuentas: String
}

input CreateTypeCreditDto {
  id: Float!
  nombre: String!
  cuentas: String!
}

input UpdateTypeCreditDto {
  id: Float
  nombre: String
  cuentas: String
}